/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes                              // Starts the section for specifying the schemes for time derivatives.
{
    default         Euler;              // Most stable, Specifies the scheme for the time derivative as Euler. It is the default scheme used for time integration
    //default        CrankNicolson  0.9;   // Stable/Accurate, 0 = Euler , 1 = 100% CrankNicolson, 0.9 = 10% Euler
    //default        backward;          // Most accurate
}

gradSchemes                            // Starts the section for specifying the schemes for gradients
{
    default         Gauss linear;                        // Specifies the scheme for the gradient as Gauss linear. It uses a linear interpolation scheme for gradient calculations
    //default        cellMDLimited Gauss linear 1.0;    // Alternative default, Add limiter for stability
    //grad(p)        leastSquares;                      //Optional, overrides default for pressure
}

divSchemes                             // Starts the section for specifying the schemes for divergences
{
    div(rhoPhi,U)   Gauss linear;                          // divergence scheme for the product of the density (rho) and the scalar field phi, multiplied by the velocity vector U. It uses the Gauss linear scheme, which is a simple and commonly used scheme for calculating divergence.
    div(phi,alpha)  Gauss interfaceCompression vanLeer 1;  // divergence scheme for the scalar field phi multiplied by the alpha field. It uses the Gauss scheme with interface compression and the vanLeer limiter with a factor of 1. These options are used to improve the accuracy and stability of the scheme near discontinuities or interfaces in the flow
    div(phi,k)      Gauss limitedLinear 1;                 // divergence scheme for the scalar field phi multiplied by the turbulent kinetic energy (k). It uses the Gauss scheme with limited linear interpolation and a factor of 1. This scheme is used for modeling turbulence in CFD simulations
    div(phi,B)      Gauss limitedLinear 1;                 // divergence scheme for the scalar field phi multiplied by the magnetic field B
    div(B)          Gauss linear;                          // divergence scheme for the magnetic field B
    div(phi,nuTilda) Gauss limitedLinear 1;                // divergence scheme for the scalar field phi multiplied by nuTilda. NuTilda is often used in turbulence modeling
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;      // complex expression involving the divergence of a quantity related to density (rho), effective viscosity (nuEff), and the second deviatoric derivative of the gradient of velocity (T(grad(U))). It also uses the Gauss linear scheme
}

laplacianSchemes                                       // Starts the section for specifying the schemes for laplacians.
{
    default         Gauss linear corrected;
}

interpolationSchemes                                   // Starts the section for specifying the schemes for interpolations.
{
    default         linear;                            // Specifies the scheme for interpolation as linear. It uses linear interpolation for data interpolation.
}

snGradSchemes                                          // Starts the section for specifying the schemes for surface normal gradients.
{
    default         corrected;                         // best for Max non-orthogonal < 70 deg, corrects the vectors out of cells in the mesh
}

// ************************************************************************* //
