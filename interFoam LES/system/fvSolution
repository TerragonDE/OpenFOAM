/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    alpha.water                              // Specifies the solver settings for the field variable  ( optional: alpha.water.*, where * represents any subfield under alpha.water.)
    {
        nAlphaCorr      1;                         // Specifies the number of alpha corrections
        nAlphaSubCycles 4;                         // Specifies the number of alpha sub-cycles
    }

    "pcorr.*"      // The pcorr field is generally used for flux correction when the mesh changes (i.e. a dynamic simulation). See e.g. CorrectPhi.
    {
        solver          PCG;
        preconditioner
        {
            preconditioner  GAMG;
            tolerance       1e-05;
            relTol          0;
            smoother        DICGaussSeidel;
        }
        tolerance       1e-05;
        relTol          0;
        maxIter         100;
    }

    p_rgh
    {
        solver          GAMG;              // Specifies the solver type as GAMG (Geometric Algebraic MultiGrid)
        tolerance       1e-07;             // Specifies the convergence tolerance for the solver
        relTol          0.01;              // Specifies the relative tolerance for the solver
        smoother        DIC;               // Specifies the smoother type as DIC (Damped Jacobi)
    }

    p_rghFinal
    {
        solver          PCG;
        preconditioner
        {
            preconditioner  GAMG;
            tolerance       1e-07;
            relTol          0;
            nVcycles        2;
            smoother        DICGaussSeidel;
            nPreSweeps      2;
        }
        tolerance       1e-07;
        relTol          0;
        maxIter         20;
    }

    "(U|k)"
    {
        solver          smoothSolver;
        smoother        GaussSeidel;
        tolerance       1e-06;
        relTol          0.1;
        nSweeps         1;
    }

    "(U|k)Final"
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-08;
        relTol          0;
    }
}

PIMPLE
{
    momentumPredictor no;               // typically set to off for some ï¬‚ows, including low Reynolds number and multiphase.
    nCorrectors     2;                //nCorrectors 3; this is the pressure correction step. so it solves the pressure 3 times. 
    nNonOrthogonalCorrectors 1;           //default 0, may be 2, nNonOrthogonalCorrectors is number of pressure equation steps (zero means one step)
}


// ************************************************************************* //
