/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.3                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
 
FoamFile
{
    version         2.0;
    format          ascii;
 
    root            "";
    case            "";
    instance        "";
    local           "";
 
    class           dictionary;
    object          decomposeParDict;
}
 
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// How to run parallel

// Step 1: import mesh with ideasUnvToFoam like normal
// Step 2: run decomposePar in case directory. (should create 1 subfolder for every processor, 8 in this case)
// Step 3: run "mpirun -np 8 twoPhaseEulerFoam -parallel" (now it should run and create timeSteps in the subfolders)
//			if you are root: "mpirun --allow-run-as-root -np 8 twoPhaseEulerFoam -parallel"
// Step 4: run "reconstructPar" to bring together all timeSteps from the subflders in the main case folder
// Step 5: run "paraFoam" to see result
 
 
numberOfSubdomains 8;					// specifies the number of processor (or cores) you want to use to solve your case.
 
method          simple;					// decomposes the domain in equal parts according in the directions specified in the corresponding subdictionary simpleCoeffs. 
							// For example, do decompose a case in 8 parts in the x direction, n has to be set to (8 1 1). 
							// To split the domain into 8 parts, 4 in the x direction and 2 in the z direction, n has to be set to (4 1 2).
 
simpleCoeffs
{
    n               (8 1 1);			// x = 8 parts because its long, y = 1 part, z = 1 parts
    delta           0.001;			// is the cell skew factor. It's default value is 0.001.
}
 
hierarchicalCoeffs
{
    n               (1 1 1);
    delta           0.001;
    order           xyz;
}
 
metisCoeffs
{
    processorWeights 
    (
        1
        1
        1
    );
}
 
manualCoeffs
{
    dataFile        "";
}
 
distributed     no;
 
roots           
(
);
 
 
// ************************************************************************* //
