/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    "alpha.water.*"                              // Specifies the solver settings for the field variable alpha.water.*, where * represents any subfield under alpha.water.
    {
        isoFaceTol      1e-10;                    // Specifies the tolerance for the isosurface face calculation.
        surfCellTol     1e-6; // Specifies the tolerance for the surface cell calculation
        nAlphaBounds    3; // Specifies the number of alpha bounds
        snapTol         1e-12; // Specifies the tolerance for snapping of faces
        clip            true; // Specifies whether clipping is enabled or not
        writeSurfCells  false; // Specifies whether to write surface cells or not
        writeBoundedCells false; // Specifies whether to write bounded cells or not
        writeIsoFaces   false; // Specifies whether to write isosurface faces or not
        reconstructionScheme plicRDF; // Specifies the reconstruction scheme for isoAlpha

        nAlphaCorr      1; // Specifies the number of alpha corrections
        nAlphaSubCycles 1; // Specifies the number of alpha sub-cycles
        cAlpha          1; // Specifies the correction factor for alpha
    }

    p_rgh
    {
        solver          GAMG;  // Specifies the solver type as GAMG (Geometric Algebraic MultiGrid)
        tolerance       1e-08;  // Specifies the convergence tolerance for the solver
        relTol          0.01;  // Specifies the relative tolerance for the solver
        smoother        DIC; // Specifies the smoother type as DIC (Damped Jacobi)
        cacheAgglomeration no; // Specifies whether cache agglomeration is enabled or not
    }

    p_rghFinal
    {
        $p_rgh;                      // Inherits the settings from the previous p_rgh solver
        tolerance       1e-9;
        relTol          0;

    }

    "pcorr.*"
    {
        $p_rghFinal;                // Inherits the settings from the previous p_rghFinal solver
        tolerance       1e-08;
    }

    U
    {
        solver          smoothSolver;    // Specifies the solver type as smoothSolver
        smoother        GaussSeidel;    // Specifies the smoother type as GaussSeidel.
        tolerance       1e-07;
        relTol          0;
        nSweeps         1;    // Specifies the number of sweeps for the solver.
    }

    "(k|omega|B|nuTilda).*"            // Specifies the solver settings for field variables starting with "k", "omega", "B", or "nuTilda".
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;    // Specifies the smoother type as symGaussSeidel.
        tolerance       1e-08;
        relTol          0;
    }
}

PIMPLE
{
    momentumPredictor   no;
    nOuterCorrectors    1;
    nCorrectors         3;
    nNonOrthogonalCorrectors 0;
}

relaxationFactors
{
    equations
    {
        ".*"                1;
    }
}


// ************************************************************************* //
